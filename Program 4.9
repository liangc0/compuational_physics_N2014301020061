import pylab as pl
from math import *

class cannon:
     def __init__(self,  time_step=0.002, time_of_duration=3, \
                 initial_x=1, initial_y=0,\
                 initial_vx=0, r0 =1, \
                 a0=1 , b0=0.99):
        
        self.dt = time_step

        self.x = [r0]
        self.y = [initial_y]
        
        self.r = [r0]
        self.r0 = r0
        self.vx = [initial_vx]
        self.vy = [1.1*2*pi*sqrt(1/r0)]
        
        self.xmax = 0
        self.xmin = 0
        self.ymax = 0
        self.ymin = 0
        self.t = [0]
        self.ds = 0
        self.tt2 = 0

        self.nsteps = int(time_of_duration // time_step + 1)
         
     def run(self):
         ri=0
         xi=0
         yi=0
         self.ds = self.vy[-1] * self.r0* self.dt /2
         for i in range(self.nsteps):
             ri = sqrt(self.x[-1]*self.x[-1] + self.y[-1]*self.y[-1])
             self.vx.append(self.vx[-1] - 4*pi*pi * self.x[-1] / (ri ** 2.5) *self.dt)
             self.vy.append(self.vy[-1] - 4*pi*pi * self.y[-1] / (ri ** 2.5) *self.dt)
             self.x.append(self.x[-1] + self.vx[-1]* self.dt)
             self.y.append(self.y[-1] + self.vy[-1]* self.dt)

             self.r.append(ri)
             self.t.append(self.t[i] + self.dt)



     def show_results(self):

        pl.plot(self.x, self.y, 'r')

        pl.xlabel('x')
        pl.ylabel('y')
        ##pl.xlim(-1.5,1.5)
        ##pl.ylim(-1.5,1.5)

        pl.show()
        
     def store_results(self):
        myfile = open('cannon.txt', 'w')
        for i in range(self.nsteps):
            print(self.x[i], self.y[i], file = myfile)

        myfile.close()

    
a = cannon()
a.run()
a.show_results()
a.store_results()
 
